# Framework Real Estate Solutions Project Rules

## Project Overview
This is a real estate solutions project focused on providing framework-based tools and services for real estate professionals.

You are an expert full-stack developer specializing in real estate technology platforms. When building applications, follow these principles:

## FIRST PRIORITY: Directory Structure
Always start by creating a clear, scalable directory structure before writing any code. Use this structure:

```
/src
  /api              # API endpoints and routes
    /auth           # Authentication endpoints
    /properties     # Property listing endpoints
    /users          # User management endpoints
    /transactions   # Real estate transaction endpoints
  /components       # Reusable UI components
    /common         # Shared components (buttons, inputs, etc.)
    /layout         # Layout components (header, footer, sidebar)
    /property       # Property-specific components
    /dashboard      # Dashboard components
  /services         # Business logic and external integrations
    /mls            # MLS integration services
    /payment        # Payment processing
    /email          # Email notification services
    /analytics      # Analytics and reporting
  /models           # Data models and schemas
    /property       # Property-related models
    /user           # User and agent models
    /transaction    # Transaction models
  /utils            # Utility functions and helpers
    /validators     # Input validation functions
    /formatters     # Data formatting utilities
    /calculations   # Real estate calculations (mortgage, ROI, etc.)
  /config           # Configuration files
    /database       # Database configuration
    /api            # API configuration
    /constants      # Application constants
  /middleware       # Express/API middleware
    /auth           # Authentication middleware
    /validation     # Request validation middleware
    /errorHandling  # Error handling middleware
  /database         # Database migrations and seeds
    /migrations     # Database migration files
    /seeds          # Seed data for development
  /tests            # Test files
    /unit           # Unit tests
    /integration    # Integration tests
    /e2e            # End-to-end tests
/public             # Static assets
  /images           # Image assets
  /styles           # Global styles
  /scripts          # Client-side scripts
/docs               # Documentation
  /api              # API documentation
  /guides           # User guides
  /architecture     # Architecture documentation
```

## Code Style Guidelines

### General Principles
- Write clean, readable, and maintainable code
- Follow established patterns in the codebase
- Prefer clarity over cleverness
- Keep functions small and focused on a single responsibility

### Naming Conventions
- Use descriptive variable and function names
- Classes: PascalCase (e.g., PropertyListing, UserAccount)
- Functions/Methods: camelCase (e.g., calculateMortgage, getPropertyDetails)
- Constants: UPPER_SNAKE_CASE (e.g., MAX_LISTING_PRICE, DEFAULT_COMMISSION_RATE)
- Files: kebab-case for general files, PascalCase for component files

### Code Organization
- Group related functionality into modules
- Keep business logic separate from presentation logic
- Use clear folder structure (e.g., /components, /services, /utils, /models)
- Place tests alongside the code they test

### Best Practices
- Always validate user input
- Handle errors gracefully with proper error messages
- Use environment variables for configuration
- Never commit sensitive data (API keys, passwords, etc.)
- Write self-documenting code, add comments only when necessary
- Implement proper data validation for property listings and user data

### Real Estate Domain Specifics
- Use standard real estate terminology (MLS, listing, showing, escrow, etc.)
- Validate property data according to industry standards
- Ensure compliance with fair housing regulations in any user-facing content
- Handle monetary values with appropriate precision (use decimal types, not floats)
- Include proper date/time handling for showings and deadlines

### Testing
- Write tests for critical business logic
- Test edge cases, especially for financial calculations
- Ensure data validation is thoroughly tested
- Mock external services (MLS APIs, payment processors, etc.)

### Security
- Sanitize all user inputs
- Implement proper authentication and authorization
- Encrypt sensitive data at rest and in transit
- Follow OWASP guidelines for web applications
- Ensure PII (Personally Identifiable Information) is properly protected

### Performance
- Optimize database queries for property searches
- Implement caching for frequently accessed data
- Use pagination for large result sets
- Lazy load images and non-critical resources

### Documentation
- Document API endpoints with clear examples
- Include setup instructions in README
- Document any real estate specific calculations or business rules
- Keep documentation up to date with code changes

## Git Workflow
- Use meaningful commit messages
- Create feature branches for new development
- Keep commits focused and atomic
- Review code before merging

## Dependencies
- Regularly update dependencies for security patches
- Document why each dependency is needed
- Prefer well-maintained packages with good community support

## Technology Stack Recommendations

### Frontend
- Next.js 14 with TypeScript for SEO and performance
- Tailwind CSS for rapid UI development
- React Query for data fetching and caching
- Zustand for lightweight state management
- Socket.io for real-time updates

### Backend
- Node.js with TypeScript
- Express.js for REST APIs
- PostgreSQL for relational data (properties, users, transactions)
- MongoDB for unstructured data (documents, reports)
- Redis for caching and session management
- JWT for authentication

### AI/ML Stack
- OpenAI GPT-4 for natural language processing
- TensorFlow.js for property valuation models
- Restb.ai for property photo analysis
- Whisper API for audio transcription
- Pinecone for vector search

### Real Estate Specific Tools
- Zillow API for property data
- Detroit Open Data API for parcel information
- Mapbox for property mapping
- Twilio for WhatsApp integration
- Otter.ai for walkthrough transcription
- DocuSign for e-signatures
- Baselane for property management

## Common Real Estate Features to Implement

### Core Features
1. **Property Listings**
   - Advanced search and filtering
   - Map-based search
   - Virtual tours and image galleries
   - Favorite/save properties
   - Property comparison tools

2. **User Management**
   - Role-based access (buyers, sellers, agents, admins)
   - Agent profiles and ratings
   - Client portals
   - Document management

3. **Transaction Management**
   - Offer submission and tracking
   - Escrow timeline management
   - Document signing integration
   - Commission calculations

4. **Communication**
   - In-app messaging
   - Showing scheduler
   - Email/SMS notifications
   - Lead capture and CRM

5. **Analytics & Reporting**
   - Market trends
   - Property valuation tools
   - Agent performance metrics
   - ROI calculators

## API Design Guidelines

### RESTful Endpoints
```
GET    /api/properties          # List properties
GET    /api/properties/:id      # Get single property
POST   /api/properties          # Create property (agents only)
PUT    /api/properties/:id      # Update property
DELETE /api/properties/:id      # Delete property

GET    /api/properties/:id/images       # Get property images
POST   /api/properties/:id/images       # Upload images
DELETE /api/properties/:id/images/:imageId  # Delete image

POST   /api/properties/:id/schedule-showing  # Schedule showing
GET    /api/users/:id/showings              # Get user's showings
```

### Response Format
```json
{
  "success": true,
  "data": {},
  "message": "Operation successful",
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 100
  }
}
```

## Database Schema Considerations

### Key Tables
- properties (listings)
- users (buyers, sellers, agents)
- property_images
- showings
- offers
- transactions
- messages
- saved_searches
- property_views (analytics)

### Important Fields for Properties
- MLS number
- Property type (residential, commercial, land)
- Status (active, pending, sold)
- Price history
- Tax information
- HOA details
- Geolocation data
- Zoning information

## Compliance and Legal Considerations

1. **Fair Housing Act Compliance**
   - No discriminatory language
   - Equal opportunity messaging
   - Accessible design (WCAG compliance)

2. **Data Privacy**
   - GDPR/CCPA compliance
   - Clear privacy policies
   - Data retention policies
   - Right to deletion

3. **Real Estate Regulations**
   - State-specific licensing requirements
   - Disclosure requirements
   - Advertising regulations
   - Commission structure compliance

## Error Handling Patterns

```javascript
// Example error handler for real estate operations
class PropertyError extends Error {
  constructor(message, code, statusCode) {
    super(message);
    this.code = code;
    this.statusCode = statusCode;
  }
}

// Usage
if (!property.isActive) {
  throw new PropertyError(
    'This property is no longer available',
    'PROPERTY_UNAVAILABLE',
    400
  );
}
```

## Performance Optimization

1. **Image Optimization**
   - Lazy loading for property images
   - Multiple image sizes (thumbnail, medium, large)
   - WebP format support
   - CDN integration

2. **Search Optimization**
   - Elasticsearch for complex property searches
   - Database indexing on common search fields
   - Query result caching
   - Pagination and infinite scroll

3. **Map Performance**
   - Cluster markers for multiple properties
   - Load properties within viewport only
   - Cache map tiles
   - Debounce map movement events

## AI Development Guidelines

### WhatsApp Assistant Development
1. **Message Processing**
   - Implement message queuing for scalability
   - Add timeout handling (max 2 minutes per analysis)
   - Support for voice messages via Whisper API
   - Graceful error handling with user-friendly messages

2. **Report Generation**
   - Use branded templates for consistency
   - Generate both PDF and web versions
   - Include confidence scores for all estimates
   - Add disclaimer about AI-generated content

3. **Data Priority**
   - User input (audio/text) overrides photo analysis
   - Recent data overrides historical data
   - Manual overrides stored for learning

### Computer Vision Guidelines
1. **Photo Analysis**
   - Process maximum 20 photos per property
   - Resize images before analysis (max 1024px)
   - Cache analysis results for 30 days
   - Track confidence scores for each component

2. **Component Detection**
   - Roof, HVAC, Plumbing, Electrical, Windows, Flooring
   - Condition scores: Excellent (0%), Good (30%), Fair (60%), Poor (100%)
   - Flag critical safety issues immediately

### Cost Estimation
1. **Component Pricing**
   - Base costs per square foot/unit
   - Labor costs separate from materials
   - Regional adjustments for Detroit market
   - Contractor-specific pricing overrides

2. **Accuracy Tracking**
   - Compare estimates to actual costs
   - Adjust models based on historical data
   - Monthly recalibration of pricing

### Market Monitoring
1. **Property Scanning**
   - Check new listings every 4 hours
   - Focus on $50K-$100K range
   - Score based on ROI potential
   - Auto-analyze high-scoring properties

2. **Alert System**
   - Immediate alerts for >40% ROI potential
   - Daily digest of opportunities
   - Weekly market trend reports

## Affordable Housing Focus

### Development Priorities
1. Focus on properties requiring <$10K rehabilitation
2. Target rent levels at or below Section 8 Fair Market Rents (FMR) for Detroit
   - 1BR: $858/month
   - 2BR: $1,024/month
   - 3BR: $1,329/month
   - 4BR: $1,628/month
3. Prioritize proximity to services and transportation
4. Track social impact metrics alongside financial metrics

### Tenant Considerations
1. Flexible credit requirements
2. Income verification focused on stability
3. Fair housing compliance in all features
4. Multi-language support planning

### Community Integration
1. Partner with Detroit Housing Coalition
2. Track neighborhood improvement metrics
3. Report on families housed and stability
4. Open data sharing where appropriate